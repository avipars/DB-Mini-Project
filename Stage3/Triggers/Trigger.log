postgres=# -- Trigger 1: When a book is deleted, log the deletion to a journal
postgres=# CREATE TABLE IF NOT EXISTS Book_Log
postgres-# (
postgres(#   Log_ID SERIAL PRIMARY KEY,
postgres(#   Book_ID INT NOT NULL,
postgres(#   Title VARCHAR(1000) NOT NULL,
postgres(#   Deleted_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# );
CREATE TABLE
Time: 188.453 ms
postgres=#
postgres=# CREATE OR REPLACE FUNCTION log_book_deletion()
postgres-# RETURNS TRIGGER AS $$
postgres$# BEGIN
postgres$#   INSERT INTO Book_Log (Book_ID, Title, Deleted_At)
postgres$#   VALUES (OLD.ID, OLD.Title, CURRENT_TIMESTAMP);
postgres$#
postgres$#   RETURN OLD;
postgres$# END;
postgres$# $$ LANGUAGE plpgsql;
CREATE FUNCTION
Time: 0.532 ms
postgres=#
postgres=# DROP TRIGGER IF EXISTS book_delete_trigger ON Book;
NOTICE:  trigger "book_delete_trigger" for relation "book" does not exist, skipping
DROP TRIGGER
Time: 1.282 ms
postgres=#
postgres=# CREATE TRIGGER book_delete_trigger
postgres-# AFTER DELETE ON Book
postgres-# FOR EACH ROW
postgres-# EXECUTE FUNCTION log_book_deletion();
CREATE TRIGGER
Time: 1.157 ms
postgres=#
postgres=# -- Trigger 2: if a book gets classified as an eBook, we change its Condition and Location as required
postgres=# CREATE OR REPLACE FUNCTION update_condition_for_ebook()
postgres-# RETURNS TRIGGER AS $$
postgres$# BEGIN
postgres$#   -- Check if the book format is changed to 'eBook'
postgres$#   IF TG_OP = 'UPDATE' AND NEW.Format = 'Ebook' AND OLD.Format != 'Ebook' THEN
postgres$#     -- Update the Condition to 'NEW' in the Location table for the book
postgres$#     UPDATE Location
postgres$#     SET Condition = 'New', Floor = 'E-Library Section', Shelf = 1
postgres$#     WHERE ID = NEW.ID;
postgres$#   END IF;
postgres$#     -- Handle when a new eBook is inserted
postgres$#   IF TG_OP = 'INSERT' AND NEW.Format = 'Ebook' THEN
postgres$#     -- Automatically add the eBook to the Location table with the 'New' condition and 'E-Library Section' floor
postgres$#     INSERT INTO Location (Quantity, Floor, Shelf, Condition, ID, Location_ID)
postgres$#     VALUES (1, 'E-Library Section', 1, 'New', NEW.ID, NEW.ID);
postgres$#   END IF;
postgres$#
postgres$#
postgres$#   RETURN NEW;
postgres$# END;
postgres$# $$ LANGUAGE plpgsql;
CREATE FUNCTION
Time: 0.545 ms
postgres=#
postgres=# DROP TRIGGER IF EXISTS update_condition_on_ebook_format ON Book;
NOTICE:  trigger "update_condition_on_ebook_format" for relation "book" does not exist, skipping
DROP TRIGGER
Time: 1.385 ms
postgres=#
postgres=# CREATE TRIGGER update_condition_on_ebook_format
postgres-# AFTER UPDATE ON Book
postgres-# FOR EACH ROW
postgres-# WHEN (OLD.Format != NEW.Format AND NEW.Format = 'Ebook')
postgres-# EXECUTE FUNCTION update_condition_for_ebook();
CREATE TRIGGER
Time: 0.910 ms
postgres=#
postgres=# DROP TRIGGER IF EXISTS insert_condition_on_new_ebook ON Book;
NOTICE:  trigger "insert_condition_on_new_ebook" for relation "book" does not exist, skipping
DROP TRIGGER
Time: 1.294 ms
postgres=#
postgres=# CREATE TRIGGER insert_condition_on_new_ebook
postgres-# AFTER INSERT ON Book
postgres-# FOR EACH ROW
postgres-# WHEN (NEW.Format = 'Ebook')
postgres-# EXECUTE FUNCTION update_condition_for_ebook();
CREATE TRIGGER
Time: 0.553 ms